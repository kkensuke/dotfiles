# espanso match file
# For a complete introduction, visit the official docs at: https://espanso.org/docs/


global_vars:
  - name: "clipboard"
    type: "clipboard"
  - name: today
    type: date
    params:
      format: "%Y/%m/%d"
  - name: now
    type: date
    params:
      format: "%Y/%m/%d/%H:%M"


matches:

# =================================
#  Personal Information & Placeholders
# =========================================
  - trigger: ";name"
    replace: "{{name}}"
  - trigger: ";Name"
    replace: "{{Name}}"

  - trigger: ";ng"
    replace: "{{email1}}"
  - trigger: ";kami"
    replace: "{{email2}}"
  - trigger: ";ecc"
    replace: "{{email3}}"
  - trigger: ";kensuke"
    replace: "{{email4}}"
  - trigger: ";ice"
    replace: "{{email5}}"

  - trigger: ";35"
    replace: "{{uid}}"
  - trigger: ";rigaku"
    replace: "{{major}}"
  - trigger: ";166"
    replace: "{{post}}"
  - trigger: ";tou"
    replace: "{{address1}}"
  - trigger: ";kago"
    replace: "{{address2}}"
  - trigger: ";09"
    replace: "{{phone1}}"
  - trigger: ";08"
    replace: "{{phone2}}"
  - trigger: ";07"
    replace: "{{phone3}}"
  - trigger: ";vmix"
    replace: "{{q1}}"
  - trigger: ";ken-"
    replace: "{{q2}}"

# =========================================
#  Time & Date
# =========================================
  - trigger: ";date"
    replace: "{{today}}"
  - trigger: ";now"
    replace: "{{now}}"

# =========================================
#  Symbols & Emojis
# =========================================

# --- Special Keyboard Symbols ---
  - trigger: ";ctrl"
    replace: "⌃"
  - trigger: ";cmd"
    replace: "⌘"
  - trigger: ";shift"
    replace: "⇧"
  - trigger: ";opt"
    replace: "⌥"
  - trigger: ";kall"
    replace: "⌃⌥⇧⌘"

# --- Emojis ---
# Note: Some triggers were duplicated (e.g., ;ok). Kept the first instance.
  - triggers: [";ok",";emoji"]
    replace: "👍"
  - triggers: [";ok",";emoji"]
    replace: "✅"
  - triggers: [";up",";emoji"]
    replace: "⬆️"
  - triggers: [";down",";emoji"]
    replace: "⬇️"
  - triggers: [";pc",";emoji"]
    replace: "🧑‍💻"
  - triggers: [";pc",";emoji"]
    replace: "💻"
  - triggers: [";bow",";emoji"]
    replace: "🙇"
  - triggers: [";bow",";emoji"]
    replace: "🙇‍♂️"
  - triggers: [";smile",";emoji"]
    replace: "😊"
  - triggers: [";sw",";emoji"]
    replace: "😅"
  - triggers: [";sw",";emoji"]
    replace: "💦"
  - triggers: [";lol",";emoji"]
    replace: "😂"
  - triggers: [";tear",";emoji"]
    replace: "🥲"
  - triggers: [";die",";emoji"]
    replace: "😇"
  - triggers: [";glass",";emoji"]
    replace: "😎"
  - triggers: [";dbt",";emoji"]
    replace: "🧐"
  - triggers: [";think",";emoji"]
    replace: "🤔"
  - triggers: [";cry",";emoji"]
    replace: "😭"
  - triggers: [";hexp",";emoji"]
    replace: "🤯"
  - triggers: [";sleep",";emoji"]
    replace: "😪"
  - triggers: [";sleep",";emoji"]
    replace: "😴"
  - triggers: [";sheep",";emoji"]
    replace: "🐑"
  - triggers: [";ocha",";emoji"]
    replace: "🍵"
  - triggers: [";facepalm", ";fp", ";emoji"]
    replace: "🤦"
  - triggers: [";shrug", ";emoji"]
    replace: "🤷"
  - triggers: [";tada", ";party", ";emoji"]
    replace: "🎉"
  - triggers: [";eyes", ";emoji"]
    replace: "👀"
  - triggers: [";pray", ";emoji"]
    replace: "🙏"
  - triggers: [";fire", ";emoji"]
    replace: "🔥"
  - triggers: [";clap", ";emoji"]
    replace: "👏"

# =========================================
#  Common Phrases & Greetings
# =========================================

# --- Japanese Greetings (挨拶) ---
  - trigger: ";osewa"
    replace: "お世話になっております。"
  - trigger: ";ariga"
    replace: "ありがとうございます。"
  - trigger: ";yoro"
    replace: "よろしくお願いいたします。"
  - trigger: ";sama"
    replace: "お疲れ様です。"

# --- Placeholder Text ---
  - trigger: ";lorem"
    replace: "Lorem ipsum dolor sit amet, consectetur adipisici elit, sed eiusmod tempor incidunt ut labore et dolore magna aliqua. Donec sed odio operae, eu vulputate felis rhoncus. Salutantibus vitae elit libero, a pharetra augue. Nihil hic munitissimus habendi senatus locus, nihil horum? A communi observantia non est recedendum."

# =========================================
#  LLM & AI Prompts
# =========================================
  - trigger: ";efix"
    replace: "Please fix the following English text: "
  - trigger: ";jfix"
    replace: "以下の文章を校正してください： "
  - trigger: ";eprf"
    replace: "Please review the following guidelines and then proofread the sentence provided at the end:\n\n{{english_guideline}}\n\nSentence to proofread:"
  - trigger: ";jprf"
    replace: "次のガイドラインを確認し、最後に与えられる文章を校正してください：\n\n{{japanese_guideline}}\n\n校正する文章："
  - trigger: ";ejt"
    replace: "Please translate the following text into Japanese: "
  - trigger: ";jet"
    replace: "以下のテキストを英語に翻訳してください: "
  - trigger: ";summarize"
    replace: "Please summarize the following text or attached document in a concise manner: "
  - trigger: ";how"
    replace: "Please explain how to "
  - trigger: ";mail"
    replace: "Please write an email about the following topic politely: "
  - trigger: ";jmail"
    replace: "以下の内容のメールを丁寧に書いてください: "
  - trigger: ";ext"
    replace: "Extract the contents in markdown format with hyphen (-) bullet list. Use '##' for each header and 2 blank lines before headers and no blank line after headers: "
  - trigger: ";expeq"
    replace: "Please explain the following concept with relevant equations: "
  - trigger: ";plot"
    replace: "Generate a Python script to plot the following function or data: $|$"
  - trigger: ";expc"
    replace: "Explain what the following code does in detail: $|$"
  - trigger: ";compare"
    replace: "Compare and contrast the following theories or models: $|$"

# =========================================
#  Application Launchers & File Openers
# =========================================
# --- Open terminal, files, or directories ---
  - trigger: ";tml"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open -a Terminal.app"

  - trigger: ";dotfile"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open -a Terminal.app; echo 'code ~/github/dotfiles/zsh/'"
          # following commands deletes some letters from the file when you open it
          # cmd: "code ~/github/dotfiles/"
          # cmd: "eval 'code ~/github/dotfiles/espanso/'"
          # cmd: |
          #   osascript -e '
          #   set targetFolderPath to "/Users/kensuke/github/dotfiles/espanso/"
          #   tell application "Visual Studio Code"
          #       activate
          #       open targetFolderPath
          #   end tell
          #   '

  - trigger: ";espanso"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open -a Terminal.app; echo 'code ~/github/dotfiles/espanso/'"

  - trigger: ";quantum"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open ~/github/qc/"

  - trigger: ";memo"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo '- {{now}}: {{clipboard}}' >> ~/Desktop/memo.md"

# --- File Creation ---
  - trigger: ";newfile"
    replace: "{{output}}"
    vars:
      - name: uuid
        type: shell
        params:
          cmd: "uuidgen"
      - name: output
        type: shell
        params:
          cmd: "cd ~/Desktop; touch {{uuid}}.md; open -a CotEditor.app {{uuid}}.md"

  - regex: ";url\\((?P<name>.*)\\)"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "cd ~/Desktop; echo \"[InternetShortcut]\nURL={{clipboard}}\" > \"{{name}}\".url"

# --- Move to a tab if it exists, otherwise open a new tab ---
  - trigger: ";gai"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: aistudio.google.com
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

  - trigger: ";gpt"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: chatgpt.com
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

  - trigger: ";you"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: youtube.com
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

  - trigger: ";slack"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: app.slack.com
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

  - trigger: ";github"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: github.com
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

  - trigger: ";amazon"
    replace: "{{output}}"
    vars:
      - name: "url"
        type: echo
        params:
          echo: amazon.co.jp
      - name: output
        type: shell
        params:
          cmd: "{{tabchange}}"

# --- always open in new tab ---
  - trigger: ";ggs"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open 'https://www.google.com/search?q={{clipboard}}'"

  - trigger: ";claude"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open \"https://claude.ai/\""

  - trigger: ";fast"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open \"https://fast.com/\""

  - trigger: ";Espanso"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "open \"https://espanso.org/docs/get-started/\""

# =========================================
#  Programming & Development Utilities
# =========================================

# --- General ---
  - trigger: ";local"
    replace: "localhost:3000/"

  - trigger: ";uuid"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          # macOS,Linux:
          cmd: "uuidgen"
          # Windows (requires PowerShell):
          # cmd: "powershell -command \"[guid]::NewGuid().ToString()\""

  - trigger: ";genpw"
    replace: "{{output}}"
    vars:
      - name: length
        type: echo
        params:
          echo: "25" # must be string
      - name: output
        type: shell
        params:
          # macOS/Linux with /dev/urandom
          cmd: "head /dev/urandom | LC_ALL=C tr -dc A-Za-z0-9 | head -c {{length}}; echo ''"

# --- Shell Execution ---
  - trigger: ";shell"
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "echo 'Hello from your shell'"

  # - regex: ";\\((?P<command>.*)\\)" # Execute arbitrary shell command
  #   replace: "{{result}}"
  #   vars:
  #     - name: result
  #       type: shell
  #       params:
  #         cmd: "eval $ESPANSO_COMMAND"

# --- Web Lookups ---
  - regex: ";def\\((?P<word>.*)\\)" # Dictionary lookup
    replace: "{{definition}}"
    vars:
      - name: definition
        type: shell
        params:
          cmd: "curl -s https://api.dictionaryapi.dev/api/v2/entries/en/$ESPANSO_WORD | grep -o '\"definition\":\"[^\"]*\"' | head -n 1 | sed 's/\"definition\":\"\\([^\"]*\\)\"/\\1/'"
          # This relies on specific JSON structure and tools (grep, head, sed)

  - trigger: ";ip" # Public IP address
    replace: "{{output}}"
    vars:
      - name: output
        type: shell
        params:
          cmd: "curl -s 'https://api.ipify.org'" # Added -s for silent curl

# =========================================
#  Mathematics
# =========================================

# --- Greek Letters (Lowercase) ---
  - trigger: ";alpha"
    replace: "α"
  - trigger: ";beta"
    replace: "β"
  - trigger: ";gamma"
    replace: "γ"
  - trigger: ";delta"
    replace: "δ"
  - trigger: ";epsilon"
    replace: "ε"
  - trigger: ";zeta"
    replace: "ζ"
  - trigger: ";eta"
    replace: "η"
  - trigger: ";theta"
    replace: "θ"
  - trigger: ";iota"
    replace: "ι"
  - trigger: ";kappa"
    replace: "κ"
  - trigger: ";lambda"
    replace: "λ"
  - trigger: ";mu"
    replace: "μ"
  - trigger: ";nu"
    replace: "ν"
  - trigger: ";xi"
    replace: "ξ"
  - trigger: ";omicron"
    replace: "ο"
  - trigger: ";pi"
    replace: "π"
  - trigger: ";rho"
    replace: "ρ"
  - trigger: ";sigma"
    replace: "σ"
  - trigger: ";varsigma"
    replace: "ς"
  - trigger: ";tau"
    replace: "τ"
  - trigger: ";upsilon"
    replace: "υ"
  - trigger: ";phi"
    replace: "φ"
  - trigger: ";varphi"
    replace: "ϕ"
  - trigger: ";chi"
    replace: "χ"
  - trigger: ";psi"
    replace: "ψ"
  - trigger: ";omega"
    replace: "ω"

# --- Greek Letters (Uppercase) ---
  - trigger: ";Gamma"
    replace: "Γ"
  - trigger: ";Delta"
    replace: "Δ"
  - trigger: ";Lambda"
    replace: "Λ"
  - trigger: ";Xi"
    replace: "Ξ"
  - trigger: ";Pi"
    replace: "Π"
  - trigger: ";Sigma"
    replace: "Σ"
  - trigger: ";Phi"
    replace: "Φ"
  - trigger: ";Psi"
    replace: "Ψ"
  - trigger: ";Omega"
    replace: "Ω"

# --- Math Operators & Relations ---
  - trigger: ";pm" # Plus-minus
    replace: "±"
  - trigger: ";cdot" # Centered dot (already have, ensuring completeness)
    replace: "·"
  - trigger: ";times" # Multiplication cross
    replace: "×"
  - trigger: ";div" # Division sign
    replace: "÷"
  - trigger: ";neq" # Not equal
    replace: "≠"
  - trigger: ";leq" # Less than or equal to
    replace: "≤"
  - trigger: ";geq" # Greater than or equal to
    replace: "≥"
  - trigger: ";lll" # Much less than
    replace: "≪"
  - trigger: ";ggg" # Much greater than
    replace: "≫"
  - trigger: ";approx" # Approximately equal
    replace: "≈"
  - trigger: ";equiv" # Equivalent to
    replace: "≡"
  - trigger: ";prop" # Proportional to
    replace: "∝"

# --- Set Theory ---
  - trigger: ";elem" # Element of
    replace: "∈"
  - trigger: ";nelem" # Contains as element (reversed 'in')
    replace: "∋"
  - trigger: ";notin" # Not an element of
    replace: "∉"
  - trigger: ";subset" # Subset of
    replace: "⊂"
  - trigger: ";supset" # Superset of
    replace: "⊃"
  - trigger: ";cup" # Union
    replace: "∪"
  - trigger: ";cap" # Intersection
    replace: "∩"
  - trigger: ";empty" # Empty set
    replace: "∅"
  - trigger: ";sN" # Natural numbers (blackboard bold)
    replace: "ℕ"
  - trigger: ";sZ" # Integers (blackboard bold)
    replace: "ℤ"
  - trigger: ";sQ" # Rational numbers (blackboard bold)
    replace: "ℚ"
  - trigger: ";sR" # Real numbers (blackboard bold)
    replace: "ℝ"
  - trigger: ";sC" # Complex numbers (blackboard bold)
    replace: "ℂ"

# --- Calculus & Analysis ---
  - trigger: ";partial" # Partial derivative
    replace: "∂"
  - trigger: ";nabla" # Nabla / Del operator
    replace: "∇"
  - trigger: ";int" # Integral sign
    replace: "∫"
  - trigger: ";prod" # Product symbol
    replace: "∏"
  - trigger: ";inf" # Infinity
    replace: "∞"
  - trigger: ";rightarrow"
    replace: "→"
  - trigger: ";mapsto" # Maps to arrow
    replace: "↦"

# --- Logic ---
  - trigger: ";forall" # For all
    replace: "∀"
  - trigger: ";exists" # There exists
    replace: "∃"
  - trigger: ";implies" # Implies (right arrow)
    replace: "⇒"
  - trigger: ";therefore"
    replace: "∴"
  - trigger: ";because" # Because
    replace: "∵"

# --- Other Useful Symbols ---
  - trigger: ";deg" # Degree symbol
    replace: "°"
  - trigger: ";ldots" # Horizontal ellipsis (...)
    replace: "…"
  - trigger: ";cdots" # Centered horizontal ellipsis
    replace: "⋯"

# --- Basic Calculations (Regex) ---
# Multiplication ;m(num1,num2)
  - regex: ";m\\((?P<num1>.*),(?P<num2>.*)\\)"
    replace: "{{result}}"
    vars:
      - name: result
        type: shell
        params:
          cmd: "expr $ESPANSO_NUM1 '*' $ESPANSO_NUM2"
# Division ;d(num1,num2)
  - regex: ";d\\((?P<num1>.*),(?P<num2>.*)\\)"
    replace: "{{result}}"
    vars:
      - name: result
        type: shell
        params:
          cmd: "expr $ESPANSO_NUM1 / $ESPANSO_NUM2"
# Power ;p(num1,num2)
  - regex: ";p\\((?P<num1>.*),(?P<num2>.*)\\)"
    replace: "{{result}}"
    vars:
      - name: result
        type: shell
        params:
          cmd: "echo $[$ESPANSO_NUM1 ** $ESPANSO_NUM2]"
# Square Root ;s(num1,num2)
  - regex: ";s\\((?P<num>.*)\\)"
    replace: "{{result}}"
    vars:
      - name: result
        type: shell
        params:
          cmd: "echo $[$ESPANSO_NUM ** 0.5]"

# =========================================
#  Markup Languages
# =========================================

# --- Markdown ---
  - trigger: ";mdlink"
    replace: "[$|$]({{clipboard}})"

  - trigger: ";mdcode"
    replace: |
          ```
          {{clipboard}}
          ```

  - trigger: ";bg"
    replace: "- {bdg-primary-line}`P$|$` "

  - trigger: ";adm"
    replace: |
            :::{admonition} {bdg-primary-line}`P$|$`
            :class:
            
            :::

  - trigger: ";br"
    replace: "<br/>"

# --- LaTeX ---
  - trigger: ";fr"
    replace: "\\frac{$|$}{}"

  - trigger: ";lsq"
    replace: "\\sqrt{$|$}"

  - trigger: ";bl"
    replace: "\\boldsymbol{$|$}"

  - trigger: ";align"
    replace: |
            \begin{align}
            $|$
            \end{align}

  - trigger: ";lfig"
    replace: |
            \begin{figure}[H]
                \centering
                \includegraphics[width=10cm]{$|$.pdf}
                \caption{}
                \label{fig:}
            \end{figure}

  - trigger: ";lmini"
    replace: |
            \begin{figure}[H]
                \begin{minipage}[b]{0.5\columnwidth}
                    \centering
                    \includegraphics[width=7cm]{.pdf}
                \end{minipage}
                \hspace{0\columnwidth}
                \begin{minipage}[b]{0.5\columnwidth}
                    \centering
                    \includegraphics[width=7cm]{.pdf}
                \end{minipage}
                \caption{}
                \label{fig:}
            \end{figure}

  - trigger: ";ldef"
    replace: |
            \begin{screen}
            \begin{definition}
                $|$
                \begin{align}
                \end{align}
            \end{definition}
            \end{screen}

  - trigger: ";lth"
    replace: |
            \begin{screen}
            \begin{theorem}
            %    $|$
            %    \begin{align}
            %    \end{align}
            \end{theorem}
            \end{screen}

  - trigger: ";llem"
    replace: |
            \begin{screen}
            \begin{lemma}
            %    $|$
            %    \begin{align}
            %    \end{align}
            \end{lemma}
            \end{screen}

  - regex: ";lit"
    replace: |
            \begin{itemize}
            %    \item $|$
            \end{itemize}

  - regex: ";lem"
    replace: |
            \begin{enumerate}
            %    \item $|$
            \end{enumerate}

  - trigger: ";ltable"
    replace: |
            \begin{table}[H] % Or [htbp]
                \centering
                \caption{caption}
                \label{tab:$|$label}
                \begin{tabular}{lll}
                    \toprule
                    Header 1 & Header 2 & Header 3 \\ \midrule
                    Data 1   & Data 2   & Data 3   \\
                    Data 4   & Data 5   & Data 6   \\ \bottomrule
                \end{tabular}
            \end{table}

# =========================================
#  Python Snippets
# =========================================
  - trigger: ";np"
    replace: "import numpy as np"

  - trigger: ";mat"
    replace: "import matplotlib.pyplot as plt"

  - trigger: ";pn"
    replace: "import pennylane as qml"

  - trigger: ";split"
    replace: "from sklearn.model_selection import train_test_split"

  - trigger: ";raise"
    replace: |
            valid_types = {"a$|$", "b", "c"}
            if x not in valid_types:
                raise ValueError(f"Invalid ~ type. Must be one of {valid_types}")

  - trigger: ";class"
    replace: |
            class Name:
                def __init__(self, , ):
                    self. = 
                    self. = 
            
                def method(self):
                    pass

  - trigger: ";open"
    replace: |
            with open('example.txt$|$', 'r') as file:
                content = file.read()
                print(content)
            with open('example.txt', 'w') as file:
                file.write('New content')

  - trigger: ";pkl"
    replace: |
            import pickle
            
            # Function to save data to a file using pickle
            def save_data(data, filename):
                try:
                    with open(filename, 'wb') as f:
                        pickle.dump(data, f)
                    print(f"Data saved to {filename} successfully.")
                except IOError:
                    print(f"Error saving data to {filename}.")
            
            # Function to load data from a file using pickle
            def load_data(filename):
                try:
                    with open(filename, 'rb') as f:
                        data = pickle.load(f)
                    print(f"Data loaded from {filename} successfully.")
                    return data
                except IOError:
                    print(f"Error loading data from {filename}.")
                    return None
            
            # Save data
            save_data(example_data, 'example_data.pkl')
            
            # Load data
            loaded_data = load_data('example_data.pkl')

  - trigger: ";nest"
    replace: |
            import itertools
            
            list1 = [1, 2, 3]
            list2 = ['a', 'b']
            
            for item1, item2 in itertools.product(list1, list2):
                print(item1, item2)

  - trigger: ";plt"
    replace: |
            import matplotlib.pyplot as plt
            import numpy as np # Assuming numpy is used for data
            
            x_data = 
            y_data = 
            
            plt.figure(figsize=(8, 6))
            plt.rcParams['font.size'] = 18
            plt.plot(x_data, y_data, color="black", linestyle='dashed', marker="o", label='Data Label')
            
            plt.xlabel("X-axis Label")
            plt.ylabel("Y-axis Label")
            plt.title("Plot Title", fontsize=16)
            
            plt.xticks()
            plt.yticks()
            
            # Optional customizations:
            # plt.xlim([min_x, max_x])
            # plt.ylim([min_y, max_y])
            # plt.yscale('log') # If log scale is needed
            # plt.grid(True, linestyle='--', alpha=0.6)
            plt.legend(bbox_to_anchor=(1, 1), loc="upper left", fontsize=18)
            
            # plt.savefig(f"{}.pdf", bbox_inches="tight")
            plt.show()
  - trigger: ";3d"
    replace: |
            import matplotlib.pyplot as plt
            import numpy as np
            
            # Assuming X, Y are 1D arrays and Z is a 2D array Z[y, x]
            X = np.linspace(-5, 5, 50)
            Y = np.linspace(-5, 5, 50)
            mesh_X, mesh_Y = np.meshgrid(X, Y)
            
            # Define Z based on mesh_X, mesh_Y
            Z = np.sin(np.sqrt(mesh_X**2 + mesh_Y**2)) 
            
            fig = plt.figure(figsize=(10, 8))
            plt.rcParams['font.size'] = 18
            ax = fig.add_subplot(111, projection='3d')
            
            surf = ax.plot_surface(mesh_X, mesh_Y, Z, cmap='viridis', edgecolor='none') # Use a colormap
            
            ax.set_xlabel('X Label', fontsize=12)
            ax.set_ylabel('Y Label', fontsize=12)
            ax.set_zlabel('Z Label', fontsize=12)
            ax.set_title('3D Surface Plot', fontsize=14)
            
            # Optional: Add a color bar
            fig.colorbar(surf, shrink=0.5, aspect=5)
            # Optional: Adjust viewing angle
            # ax.view_init(elev=30, azim=45) 
            # Optional: Adjust aspect ratio (might require newer matplotlib versions)
            # ax.set_box_aspect([1, 1, 0.7]) # Adjust aspect ratio [x, y, z]
            plt.show()

# =========================================
#  Forms
# =========================================
  - trigger: ";form1"
    form: "Hey [[name]], how are you?"
# is equivalent to:
  - trigger: ";form2"
    replace: "Hey {{form1.name}}, how are you?"
    vars:
      - name: "form1"
        type: form
        params:
          layout: "Hey [[name]], how are you?"

  - trigger: ";form"
    form: |
      Hey [[name]],
      Happy Birthday!
      [[text]]
    form_fields:
      text:
        multiline: true

  - trigger: ";todo"
    replace: "Task: {{form1.task}}, Due Date: {{form1.day}} {{form1.time}}"
    vars:
      - name: "day0"
        type: date
        params:
          format: "%Y/%m/%d"
      - name: "day1"
        type: shell
        params:
          cmd: "date -v+1d '+%Y/%m/%d'"
      - name: "day2"
        type: shell
        params:
          cmd: "date -v+2d '+%Y/%m/%d'"
      - name: "day3"
        type: shell
        params:
          cmd: "date -v+3d '+%Y/%m/%d'"
      - name: "day4"
        type: shell
        params:
          cmd: "date -v+4d '+%Y/%m/%d'"
      - name: "day5"
        type: shell
        params:
          cmd: "date -v+5d '+%Y/%m/%d'"
      - name: "day6"
        type: shell
        params:
          cmd: "date -v+6d '+%Y/%m/%d'"
      - name: "form1"
        type: form
        params:
          layout: "Task: [[task]], Due Date: [[day]] [[time]]"
          fields:
            day:
              type: choice
              values: |
                      {{day0}}
                      {{day1}}
                      {{day2}}
                      {{day3}}
                      {{day4}}
                      {{day5}}
                      {{day6}}
            time:
              type: choice
              values:
                - "9:00"
                - "10:00"
                - "11:00"
                - "12:00"
                - "13:00"
                - "14:00"
                - "15:00"
                - "16:00"
                - "17:00"
                - "18:00"
                - "19:00"
                - "20:00"

# =========================================
#  END OF FILE MARKER (Optional)
# =========================================
# Add new triggers above this line in the appropriate section.